<Project Sdk="Microsoft.NET.Sdk" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>disable</ImplicitUsings>
    <Nullable>enable</Nullable>

    <!-- Default values -->
    <IsWindows>false</IsWindows>
    <IsLinux>false</IsLinux>
    <BuildingWindows>false</BuildingWindows>
    <BuildingLinux>false</BuildingLinux>
    <!-- Redefine if OS is detected -->
    <IsWindows Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">true</IsWindows>
    <IsLinux Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinux>
    <BuildingWindows Condition="$(RuntimeIdentifier.StartsWith('win'))">true</BuildingWindows>
    <BuildingLinux Condition="$(RuntimeIdentifier.StartsWith('linux'))">true</BuildingLinux>
    <MakeBinary Condition="$(IsWindows)">make</MakeBinary>
    <MakeBinary Condition="$(IsLinux)">x86_64-w64-mingw32-make</MakeBinary>
    <MakeCommand Condition="$(IsWindows)">$(MakeBinary)</MakeCommand>
    <MakeCommand Condition="$(IsLinux)">CFLAGS="-I.." DLL=Y $(MakeBinary) -f Makefile WINDRES=x86_64-w64-mingw32-windres</MakeCommand>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="System.IO.Hashing" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\dotnet-curses\dotnet-curses\dotnet-curses.csproj" />
  </ItemGroup>

  <!-- Build Tasks -->

  <!-- Determine proper resources folder -->
  <PropertyGroup Condition="$(BuildingWindows) Or ($(IsWindows) And !$(BuildingLinux))">
    <ResourceFolder>Resources/Windows</ResourceFolder>
  </PropertyGroup>

  <PropertyGroup Condition="$(BuildingLinux) Or ($(IsLinux) And !$(BuildingWindows))">
    <ResourceFolder>Resources/Linux</ResourceFolder>
  </PropertyGroup>

  <!-- Check make is available before trying to do anything -->
  <Target Name="CheckMakeBinaryCallable">
    <Exec Command="$(MakeBinary) -h > NUL" Condition="$(IsWindows)" IgnoreExitCode="True">
      <Output TaskParameter="ExitCode" PropertyName="MakeExitCode" />
    </Exec>
    <Exec Command="$(MakeBinary) --help > /dev/null" Condition="$(IsLinux)" IgnoreExitCode="True">
      <Output TaskParameter="ExitCode" PropertyName="MakeExitCode" />
    </Exec>
  </Target>

  <!-- Compile PDCurses if targeting windows -->
  <Target Name="Compile PDCurses" BeforeTargets="BeforeBuild" Condition="$(BuildingWindows)" DependsOnTargets="CheckMakeBinaryCallable">
    <Exec Command="$(MakeCommand)" WorkingDirectory="../PDCurses/wincon" Condition="'$(MakeExitCode)' == '0'" />
    <Copy SourceFiles="../PDCurses/wincon/pdcurses.dll" DestinationFolder="./Resources/Windows" Condition="'$(MakeExitCode)' == '0'" />
    <Message Text="Unable to locate $(MakeBinary), not compiling PDCurses" Importance="High" Condition="'$(MakeExitCode)' != '0'" />
  </Target>

  <!-- Force a rebuild of the assembly defining build tasks -->
  <Target Name="CompileBuildTasks" BeforeTargets="BeforeBuild">
    <Message Text="Rebuilding Blackguard.Build" Importance="High" />
    <Exec Command="dotnet build ../Blackguard.Build/Blackguard.Build.csproj" />
    <Message Text="Finished building Blackguard.Build" Importance="High" />
  </Target>

  <!-- Define HashTask, which is resolved from another assembly -->
  <UsingTask TaskName="HashTask" AssemblyFile="../Blackguard.Build/bin/Debug/net8.0/Blackguard.Build.dll" />

  <Target Name="HashNativeLibraries" BeforeTargets="BeforeBuild">
    <Message Text="Hashing libraries in $(ResourceFolder)" Importance="High" />
    <HashTask LibraryDirectory="$(ResourceFolder)" />
    <Message Text="Finished hashing libraries" Importance="High" />
  </Target>

  <ItemGroup>
    <EmbeddedResource Include="$(ResourceFolder)/*" />
  </ItemGroup>

</Project>
